#!/usr/bin/env ruby

new_version = ARGV[0]

unless (new_version = ARGV[0])
  raise "missing version argument"
end

project_root = File.expand_path('..', __dir__)

sdk_version_path = File.join(project_root, 'Buy', 'Utilities', 'SDK.swift')
unless File.exist?(sdk_version_path) && File.writable?(sdk_version_path)
    raise "unable to open #{sdk_version_path}"
end
sdk_version_src = File.read(sdk_version_path)

version_components = new_version.split('-').map(&:to_i)
current_components = sdk_version_src
    .match(/static let version = "([0-9.]+)"/i)
    .captures[0].split('.').map(&:to_i)

patch = version_components[1] != current_components[1] ? 0 : (current_components[2] + 1)

updated_components = [
    version_components[0],
    version_components[1],
    patch
]

new_version = updated_components.join('.')

sdk_version_src = File.read(sdk_version_path)

sdk_version_src.gsub!(/static let version = "([0-9.]+)"/, "static let version = \"#{new_version}\"")
File.open(sdk_version_path, "w") do |file|
    file.puts sdk_version_src
end

podspec_path = File.join(project_root, 'Mobile-Buy-SDK.podspec')
unless File.exist?(podspec_path) && File.writable?(podspec_path)
    raise "unable to open #{podspec_path}"
end

podspec_src = File.read(podspec_path)
if match = podspec_src.match(/s.version\s*= '([0-9.]+)'/i)
    current = match.captures[0]
    new_def = match.to_s.gsub(current, new_version)
    podspec_src.gsub!(match.to_s, new_def)
end

File.open(podspec_path, 'w') do |file|
    file.puts podspec_src
end

system('agvtool', 'new-marketing-version', new_version)

puts new_version
